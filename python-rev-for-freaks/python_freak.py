from base64 import b64decode
exec(b64decode('exec(b64decode('aW1wb3J0IHN5cwpleGVjKGI2NGRlY29kZSgnWlhobFl5aGlOalJrWldOdlpHVW9KMk16YkhwTWJrNXNaRWhLYkZrelZubGpNbXgyWW0xNGNHSlhiREJMUkVWM1RVUkJkMDFEYTB0YVdHaHNXWGxvYVU1cVVtdGFWMDUyV2tkVmIwb3hjRmxoUjNoYVpWZG9jRlJ0Y0ZOaE1YQllWRzVhWVZJeFZuWlRha1ozVjFkR1NHVkdjR3hXTW1oM1ZrY3hkMVV5UlhoalJtaFZZbXh3YUZWcVJsZGtiRTUxWTBjNVZFMUVSbnBXVjNCTFlrWmFWbFpVUmxaTlZuQkVWV3RhZDFOSFRqWlJiV3hwWWxaSmVGWnFTalJVTVVwR1QxVmFhVTB5ZUZoVk1GcGhaRVpXVlZOc1RtcGhlbFo0VmxjMVlWWkdXalpSYWs1YVZteFpNRlZyV2tkWFJUbFdaVVphVGsxc1NqRldNbmh2WXpGTmVHTklUbUZOTW5od1ZUQmFZV0l4V1hkWGEzUnBWbTFTU2xsclZuZFVNa1Y1WlVWc1lWWlhVblpaVmxwYVpESk9TVk5zYUZkaGVsWkhWMnRTU2sxV2JGZFdXR3hYWVhwR1UxUlZXa3BsVm5CSVpVaE9WR0Y2Vm5sWmExcEhWV3N4YzFOdWJGVmhNbEl6VkZSS1MyTXlUa2RWYldoWFVqQXhObFpHWkRSV2F6VkhWRzVHVkdKR1NuSlZNRnAzVWxaa2NscEljRTVOUkVJMlZqSndTMWRIU2tkVFdIQmFZbGhvTTFaVlZUQmtNbEpIVW14S1RtSkZjRFZYVkVvMFl6SldjMVJzV2xWaE0xSnZWbXhrTkdReGNFVlRiWEJQVW1zMWVGVXllR0ZoVjBwMFpVaHNXbVZyU25wVmExcFBaRmRPUm1OSGFHbFdSM2d4VmpGa01HRXhTWGxWYTJScFUwWktWMWxzWkc5VE1WcFdWbXM1YUUxclZqWlZNbmgzWVdzeFNHVkdSbFJOTTBKNldXMHhSMlJGT1ZoT1ZrSlRWbnByTVZadGVHOVVNRFZZVW01V1lWTkdXbGxaYTFVeFpFWldObEpyVGxOU2JrSkpXbFZXTUZReFRrZFdWRUpXVFc1Q1RGWnJaRk5UVjBwSlUyMTBWMUl5YUUxV1JtUTBWVEpXU0Zac2FHdGxiRnBWVkZaV1YwMHhWWHBqUnpsVVRVUkdlbFpIY0VkVmF6RkdWbFJHVmsxV2NFUlZhMXAzVTBkV1JrMVdVbFJTTVVsNFZtcEtlazVXVmtaUFZWcHBUVEo0V0ZVd1dtRmtSbFpWVTJ4T2FtRjZWbmhXVnpWaFZrWmFObEpZY0ZwV2JGa3dWV3RhUjFkRk9WWmxSbHBPVFd4S01WWXllRzlqTVUxNFkwaE9ZVTB5ZUhCVk1GcGhZakZaZDFkcmRHbFdiVkpLV1d0V2QxUXlSWGxsUld4aFZsZFNkbGxXV2xwa01rNUpVMnhvVjJGNlZrZFhhMUpLVFZac1YxWlliRmRoZWtaVFZGVmFTbVZzYkhSbFNHUlhVbTVDZVZReGFFTlZNVTVJVldwR1YwMXVhRkJVVkVFMVVtMUplbUpHV21sWFJrWTFWbFpTUzFVeVRuSk9WRnBWWVd0d2NsbHJaRFJUYkhCRlUxUkdXbFpzUmpOWmJuQlRWa2RHY21OR1dscFdiVkpvVld0YWQxTkhWa1psUmtKVFpXMWtObFpITlhkVE1VVjRWV3RhVldFd2NHOVdiVEUwWkRGVmVHRkZPVlJpUmxwSFZrY3hNR0ZIVm5OalJGcGFUVVpaTUZWcldrZFhSMHBJVW14S1RsSXpUalZXVkVaWFlUQTFTRkpyYUZSaVIyaFZXV3hvVTFsV1dsVlJiRTVPWWxaS2VsbHJWbUZoYXpGSVpVWktWbFpGY0ZSWmVrWlBZMVp3TmxOc1VsZGhNSEJHVmpKMGEwNUdUWGRPVldoaFVqSm9XRlJXWkRSa1ZsRjNWbTVhYkZac2NFbFphMUpYWVVkS2MySXpiRmROVmxwWVZGWlZOVkp0U1hwaVJscE9UVlZyZUZkV1VrOVdhekIzVGxSYVZHSkdXbFZVVmxaTFVsWmtjbHBFUW14V2JYUTJWVmR6ZUdFeVJYZE9XRXBhWVRGYU1sUnJXblprTWtwSFZtczFVMDFyTVRaV1J6VjNVekZLUjFSWVpGQlRSWEJSVm1wS1UxWldVbkZVYlhSclZtMVNlbFpITUhoV1JURldUVWh3WVZKRmEzaFhWbHBTWld4T2NtTkdUazVXYmtFeVZqRm9kMU14V25OalJGcGFaV3MxVDFsVVFURlVWbHBXVm1zNWFFMXJjRWRaYm5CRFlURmFTR0ZGZUZWV00yaFlXa1prVjFkSFVqWldiRkpPVmxaWmVsWlVUbmRpTVUxM1RWaE9WMkp0YUc5V2JGWldUVlpWZUZadGRFOVNNRnBKVlRKNGIxWkhTbGxWYlVaWFZrVktWRlJVU2t0ak1rNUhWV3MxVjFaSGVETldWM1J2WVRKU1YxcElUbFZpVkZaVlZGVmtVMWxXYkZkYVJscHJZa1ZXTlZaWE5VdFVNREZZV2pOd1dtSllhRE5XYTJSTFZsZEdSbVJGTldsU2EzQXpWbXhXVjFReVJYbFRhMXBzVWxad2NGcFhNVzlVUmxKWVpVWk9hbFpZWkROV1J6RXdZVlpLV1ZWdVFtRlNSV3Q0VjFaYVZtVnNWbkpsUms1cFlrYzVObGRYTVRSa01WWkhVbTVLYTFKcldsTlVWM2hMWld4V05sSnVUbWxpUlRFMldXdFdTMVJzV2xsVldHeFdWa1Z3VkZsNlJrNWxSMHBKV2taU1YxWXhTbTlYYTJONFZESk9SMU5yYkZoaGEzQlpWbXBPVTJSV1pGZFhiWEJPVW01Qk1sbFZWakJVYlVwSFYyNVdWMkpZUWtSYVYzaFBWbXhrY1ZOdGRFNWhiRnB2Vm14U1QxRXhVa2RXYTFwVllsaFNjRlZzYUZOWlZtUnhVV3BDVDFacmNFcFhhMmhYVjBkR05tRjZSbFpsYTFwUVZWUktTMWRHVGxsalJsSlhUV3N3ZDFaVVNuZFRNVnAwVkd0b2FWSlZOWEZWYWtKM1pERldjbUZIZEd0V2JWSjZWa1pvYjFkR1NuTmpSRnBWWWxoTk1Wa3dWWGhUVjBaSFlrWmFUbUpzU1hwV2JYQlBaREpTY2s1WVNteFNiRnBVV1d4YVMxTXhWbkpWYTA1cFlraENlbFpIZEhkaGJFcFhVMnhPV2sxcVZuSmFSbHByWXpGU2RXSkdVbGRXYTFsNlZqSndTMU14VGtkVGJsWldZa2hDY0ZadGRIZGtiRlY0VmxSU2FtRjZiRmxVVmxaWFlWVXhkRlJVUWxaTmJrSk1WbXRrVTFac1VuUk9WMmhYVFZaWk1sZFdWbXRUTVUxNVZtNVdWbUpZVWxaVVZ6QTFUa1prYzFaVVJsTldiSEJhVjJ0amVGWnJNVWhrTTJoWFRXcENNMVJzWkZkV1ZtdzJWR3MxYUdWc1JYZFdWRXAzVXpGYVNGVnJiRmhoTVVwb1ZXcE9UbVZzVWxaWmVsSlBVbXMxZUZVeWVHRmhNVXB6VW1wU1ZXRnJTak5VYkZweVpWVTFWbVJIZUdsaGVsVjRWbFJKTVdNeVJuSk9XRXBwVW10YVUxUlhlRXRsYkZwR1YyeHdUMVpyTVRSV1J6VkxWbGRGZDA1SWJGWldSWEJVV1hwR1RtVlhVa2hPVmxwVFlYcFdSVmRZY0Vkak1XUkdUVlpvYVZJd1dsUlVWVnBoWkZaUmQxWnVXbXhXYkhCWlYydGFWMkZWTVhSVmF6RldZVEZhV0ZSc1dsTmtSMDVIVTJzNVUxWkdXa2RXYTFwdllURk9jMU51UmxaaVZGWlZWRlpXUzFKV1pISmFSRkpWVm14d1dWZHJWalJpUmxwV1YxUktWMUo2VmpOV1IzTjRWbXM1VjFac1VsZFNhM0JSVm0xMFlWWnJNVmRVV0doVlltdHdhRlJWYUZOa01WWlhZVWhrVmxKcmNFaFphMUpYVmxaWmVsRnVSbUZXYkZWNFdURmFSMVpXVm5KV2JGcFlVbGM1TmxkWE1UUmtNVlpIVW14YWFWSldXazlWYWtwT1RVWlZlV05GZEZkV01ERTJWbXhvUzFWR1dYcFJXR3hXVmtWd1ZGbDZSazlPYkZKeFZHMXNhVk5GU2xaWGJGcFRZakZOZDAxWVRsWmhhM0JYVkZjeFUyUXhXbFZTYlhCT1ZqRmFlbGt3V25OV1IwWnlVMnQwVmsxSFVUQlVWM2gzVWpKR1JtTkhSazVYUlVsM1YyeFdhMkl4YkZoV2JsSlFWbnBXVlZacVNqUmxWbHBJWkVVNVRtSkZWalZXVnpWTFZERkplVlZ1VmxkV1ZuQlFWVlJHYzJOdFVrWmhSM2hUVFcxb2QxWnRjRU5rTWs1eldrWmtWV0V4V25KVVYzQlhZVVphV1dORk9WVldhMVl6Vmxkd1MyRXlTa2hsUjBaYVpXdEtlbFpWVmpCT2JVcEpWV3hLVGsxc1NqRldSRUpYWkcxV1YxZHNiRk5oYkhCd1ZGY3hUazFHVlhsalJYUlhWakJhZWxaSGRFOWhiRXAxVVc1a1ZtRXlhSEphUmxwclkyczVTV05HVWxkV2ExbDZWa1JHVjJNeFNsZFNiR2hoVWpCYVdGUlVTbTVOYkZsNVpVVTVVMVl4UmpWVWJHUkhWbXN4ZFZGck1WZFdWbHBRV1ZSS1MxSnRWa2hqUjNCT1VqTm9VMVpXVWt0Vk1rNTBWRzVXVldKdVFsVldiRlV4Wkd4c05sSnVUbGhTVkVaWldXdGtSMVV3TVVkWGJsWlZUVVphTWxwV1dtRlRWbFoxVVcxMFRtSlZNSGRXVkVwM1V6RmFWMkl6Y0dwVFJuQm9WRlZvVTFOV2NGWmFSemxvVm14c00xa3dhRXRYUmxweVRsVmFZVkpGYTNoWFZscFNaREExVjFGdGFGZFdhMncyVjFjeE5HUXhVa1prUkZwYVpXczFUMWxZY0c1TlJsVjVZMFYwVjJKVk1UUldSelZIWVRBeGNWWnRhRmRXUlVwTVZqQldNRTVYVGpaV2JXaHBVbFZ3UmxZeWRHdE9SbEpIVld0c1lWTkdXbGxaYTFVeFRsWldObEpyVGxOU2JrSkpXbFZWZUZZeFpFWlRhelZYWVRGd1YxUldXbEpsVjFGNldrZHdUbEl6YUVkV1ZFWnZVVEZPYzFKWWNGVmlWRlpSVld4ak5VNVdXbFZVYlVaT1lrVldOVlpYTlV0VU1ERnpZak53V21KWWFETldWVlUxVm0xU1IxSnNTazVpUlhBMlZtdFdZVmxYUmxkVldIQllZVEZLYUZWcVRtOVVWbXgwVGxkMGExWnRVbmxVTVZKSFZESldkRlJxVmxkU1JVbDNWbFphUm1WV1ZuVlViRkpYVm14dmVsWnJWbUZWTVZweVRsWmthRkpzU25KVVZ6RlRWREZzVjFwRVFtbGlSM2hZVjJ0YWQxbFhWblJoUlhoVlZqTm9XRnBWV25kV1IwNDJWbTFvVTAxWVFrWldNblJyVGtaU1NGUlliRkJTUmtwVldWZDBkMVl4WkhGU2F6bHFZbFpLUjFSc1dsZGhSVEYwVld4S1dsWnNXa2hVVkVaUFZteHdSMXBIY0U1aGVrVXhWbTE0YTJGck5VZFVia1pVWWtad2NWVXdXbGRsVmxGNFdraGtUbUpGVmpWV1Z6VkxWREpXY2xOcVNsVk5SbG95V2xaYVlWZFdWbk5WYlhST1RXNW9UbFpzVWt0TlIxSnlUbFJhV2sweWVGTmFWekZ2VkVaU1dHVkZPVTVpVmtwNVZrY3hNR0ZXU2xsVmFscGFZbTVDZGxWNlFYaGpNVlp4VVcxb1YxWldiekJXVkVaaFVURktSMk5GYUdwbGF6VmhWRlJDUzFSV1dsVlRha0pyWVhwc1IxbHFUbk5XTVZsNVZXeFdZVkpGY0hGVWExcFBZMVpPYzFkdFJrNU5ibWcxVjFod1EyTXhWa1prUkZwcFUwVmFiMVpzVmxwa01WVjRWbXhPVTJKVk5VZGFSVnBUWVVkS2RGVnFSbGROYm1oUVZGUkJOVkp0U1hwaVJtUllVbFJTTlZaV1VrdFZNazV5VGxWYWFWTkdjRlZVVlZKdlpWWlJlRnBJV210aVJWWTFWbGMxVDFaSFZsVmhNM0JhWWxob00xWnJaRWRTYlZKSFVteEtUbUpGY0RaV1dIQkxZakpHVms5VldtbE5NbmhZVlRCVk1XUXhjRWhPVjNSclZtMVNlVmw2VG1GWFJrcHlUbGhzV0dGcldrUlZiR1JTWlZac05sVnNVbWhoTTBKV1YydGpNV015VW5KTlNHUnJVbXhLVTFsdGRFdGhSbXhYVm14T1RtSldTbnBaYTJoTFlXMUdkRlJZY0ZWV00xRjNWVEo0UzFOV2NFaE9WVGxzWWxVME1WWnJXbE5pTVUxM1RWaE9WMkpzY0hKWlZFRXhZMnhzY2xacVFteGlWVzh5V1ZWV01GUnRTa2RUV0dSV1ZrVnZkMWx0ZUd0ak1YQkZWVzE0YVZORlNsWldWbHBxVGxaU2MxZHJXbWhOTTBKVlZteGFTbVZzVVhkV2JrNVdWbXRXTlZaWE5VdGhiVVowWVVSU1YxSjZWbnBaTW5oMlpVZE9TVlZzUWxoU00yaE1WbXhXVjFReVJYbFRhMXByVWpOQ2FGUlhkR0ZYVmxKeVdrZHdUMUpyTlhoVk1uaFhZVVpHTm1KRlZsaGhNbEV3VlhwQk1HVnNaSEZUYkdoWFVqRkdObGRYTVRSa01VNUhWMnhXYUZKWVVrOVphMXBoVFd4c1YxcEhjRTVTYXpFMFZrYzFTMkZyTVVobFJWWmFWbGRvVUZZeWVHRk9iRXAxVVd4b2FFMXNTa2hXTWpWM1lqRk5kMDFZVGxkaGEwcHpWakJrVTJSV1VYZFdibHBzVm14d1NsVXljRmRoTURGMFZGaHdWV0p1UWt4V01uaFRVbXhTY2xadGRFNWhiRnB2Vm14U1QxTXhWa2hTYkZwV1lXdHdjbGxyYUVOa1ZtUnhVMnRrV0ZKdFVsbFhXSEJUVmtkR2NtTkdaRnBOVjJoNlZWZHpOVll4Um5OVmJFcFlVakZLVEZaWGNFZFpWMVp6WWtSYVZHSkdjR2hhVnpGT1pXeFNXR1JIZEZWU2JGcEhWa2N4TUdGV1NsbGhTRVphWld0S2VsWldXa1psVmxaMVUyczVhR0pYWnpKV1ZFWlhWREpKZVZSWWFHbFNiV2hQVm1wS05HRkdWbkZSYkdScFlYcHNSMWxxVG5OV01XUkdWMVJHWVZKRmNIRlVhMXBQWTFaT2MxZHRjRmROTUVsNVZqSndRMDFHVGtoV2EyaG9Vako0V0ZSVmFFTmxWbGw0VjJzNVUxWXhSalZVYkdSSFZtMVdjbGRzUmxwV2JGcFVWRmN4VTJNeVNrbFdiWFJwWWtoQ2FGWkhjRTloTWxKWFdraE9WV0ZzU2xWVVZWSnZaVlpSZUZremFGTk5iRW94VjJ0b1YxZEhSalppUlZKVlltNUNjVnBXV2t0alYwWkdaRVUxYVZKc2J6QlhiRnByWkRBd2VWTnVUbXBTYTBwV1dWUk9VMVpXVWxaVmEyUldVbXh3U2xWWE1UQldWa3BXVGxWT1lWWnNXWGRXYTFwSFYxWk9jbU5HV2xOV1ZGWjVWMVpvZDJFeFVsaFZibFpZWWtoQ1VGUlVSblpsVmxsNVpVVmthMkY2YkVkWmFrNXpWakZaZVZWc2FGcE5NMEpoVkd0YVQyTldUbk5XYlVaT1lraENSbFl5ZEd0TlJteFhWV3RzWVZOR1dsbFphMVV4VGxaV05sSnJUbE5TYmtKSldsVlZlRll4WkVaVGF6VlhZVEZ3VjFSV1dtdFNNVkp4VkcxR1RsSkZXak5YVmxKTFlUSkdSMWRZYUdsU2VsWlJWV3hqTlU1V1duSmhSazVwVm10V05WWlhOVXRYUjBWNldqTndXbUpZYUROV2EyUlBZMjFTUjFKc1NrNWlSWEExVmtkMFUxRXlVWGhWYTJSV1lrWndVRlpzWkRSU2JGSnlXa2QwVldKRlZqTlZNalZQVjIxRmVXRkdRbHBoTVZwNlZsWmFSbVZXVm5WVGJYQm9ZbFpHTlZkclpEUmphekI1VlZoc1QxWXdXbFphVnpFMFZGWmFTV0pJY0U5V01IQlhWa2R3VDJKR1dsbFZiRlphVmtWck1GUnJXazlqVms1elZtMXdWbVZ0ZUVaV01uUnJUa1pTUjJKSVZtRlRSbHBaV1d0Vk1VNVdWalpTYTA1VFVtNUNTVmt6Y0U5WGF6RjBWV3N4V2xac1dsUlVWRXBMWXpKT1IxVnRjRmRYUmtwV1YxWlNUMUV4VWtkV2ExcFZZbGhTY0ZWc1pEUlNNV3cyVVc1T1ZsWnJWalZXVnpWUFZsWkpkMDVVVGxkU1ZscFFWV3hrVW1WVk5WaFNiRnBPVFVoQ1RGWldhSGRSTWtwelZXeGtWV0pyY0hGVmJHaHZVbFpXVjJGSE9WVldhMVl6Vld4b2ExWldXWHBSYTFKWVlsaE5lRmt4WkVabGJFWnlZMFpPVGxkRlJqVldNVkpMWXpGS1dGVlliRTlXTUZwWFZGZHdSMU14Vm5GVGFsSk9WbXMxV0ZWWGRGTlpWa2w2VkZoa1dHSlVWbWhVVjNoclZtMUdSVlJ0YkdsVFJVcFNWa1pvZDJJeFRYZE5XRTVVWW1zMVZscFdhRTVOVm14V1YyczVhV0pXUmpOYVZWWlRWVEZPU0ZWcVJsZE5iazB4VlZSQk5WSnRTWHBpUm1SWFpXMTBOVlpXVWt0Vk1rNXlUa2hzVldKc2NGRlZiR00xVGxaYWMyRkZaRk5TTUZZMlZrZDBkMVV4U1hsVmFrNVhUVVp3UjFwRVJrNWxWa3B6WVVab1YwMXJNSGRXVkVwM1V6RmFXRlJ1U2xWaWExcHlXVzE0ZDJGR1drZGhSVTVWVmpGS2VWWkhNVEJoVmtwWlZXdGtXbUp1UW5aVmVrRjRZekZhZFdGSGFGZE5NVVkwVmtSQ1YyUnRWbGRXV0hCWFlrWktiMWx0TVZOTlZsbDVaVVU1YkZack1UUldSbEpQWVRKS2MyTkhSbFpOVjFKeVZsWmFZVkpXUm5ST1ZsSlhUV3ByTWxkclVrcE5WbXhYVldwYVUxWkdTbFZaVjNSM1ZqRnJkMkZIUmxOU2JrSkpXVE53UTJGSFNuUlZha1pYVFc1b1VGUnJXazVsUmtaeVZXMUdVMDB3TVROV1JWSlBZVEpTVjFwSVRsVmliRXBSVld4ak5VNVdXbk5oUlhSWFVqQmFTVlV4VWxOV1IwWnlZMFphV0dGcldsQlpNV1JTWlZVMVdGSnNXazVoYTFwTVZsWlNUMVF5U25OVmJrNVZZbTE0Y2xSWGNGZGhSbHBWVTFob1ZWSnNWak5WTWpWVFYyMUdjazVWZEZoaWJrSnhWRlJCZUdOdFRrWmpSazVPWW0xa05GWlVSbUZSTVVwSFkwVm9iRkpZUWxSWmJGcExWR3hXVlZGcmRHaFdWR3hIV1dwT2MxWXhaRVpYYkZaYVZucFdjbHBHV210ak1WSjFWV3hTVjFaVVZUSldNalYzWWpGTmQwMVlUbFppYmtKdlZtcE9VMlJXV1hsTlNHUlBWakZhVjFscldrZFZhekZ6VTI1d1ZtVnJXbnBaYlhoelZqRnNObEZ0Um14aVYyaE5Wa1prTkZZd01VZFhia1pUWWxkNFZsUlhOVU5OYkhCR1ZsaG9WMDFFUmtwVlYzUTBWakpLY2sxSWJGZFNSWEI1V2tSS1YxSXlSa2RWYkVwWFVqTm9URlpYTURGVU1sSnpWV3hrVm1GNlZsQldiRkpYWlVac1dXTkZUbFZpVmxvd1dYcE9hMVpYUlhoVGEzUlZZa1pXTkZreFdrOVdWbEp5VDFaa1UwMUVRalJXYTFwclpERmtjazFZU2s1V1JuQldWakJrYjFReGNGaE5WVFZzVm14S1dsa3dWbmRoYXpGSVpVVmFWMUp0YUhwV1JFWmhVbXhhY1ZWc1ZsaFRSVXBRVmtaV1ZrMVZOWE5TYkd4cFVsUnNWRlZ0ZUZabFJscEhWMnhPVTJGNlJubFViRkpoVlRGYVJtTkZPV0ZXTTFKNVZGVmFVMk5zVm5KVGF6bFRWa1phTkZac1dtOVJNVkpYVWxoa1UySnNjRlpaYkdoRFpWWndWbFpVVmxkV2JrRXlWVmR6TlZVeFNYbFZWRUpYVW5wV00xVlhjM2hTYXpWWFZteFdWMUpZUWxGV2JYUnJZVzFXYzFWc1pGWmlSWEJRVld4U2MxWnNaSFZqUlU1VlRWWndTVlpIY0ZkV1ZURkdUa2h3V0dGclJqUlViWGhIVmxaT2NrOVhlR2xXTVVWNFZtdGFZVlV5VG5KT1ZWcFFWbXhhVTFZd1pEUlZSbXhZWlVaYWJHSkdSak5XVjNSaFZHc3hSVlpyV2xkTlZrcFlWa2N4UjJNeFNsVlJiRlpwWW10S1VGZHNXbFpPVmtwSVVsaHdWV0V6UWxOVVZ6RlNUVVphUjFkc1RsWmlWa1l6VkRGV1YxbFhWbkpUYXpsYVZqTm9WMXBXV2xOV01WWnpVMnMxYUdWcldsZFdWM2hUVVRGU2RGWnVTbWxTUmxwV1dXMDFRMVV4VWxoak0yaFBZa1phVmxWWGN6RmlSMHBZVlZod1YxSkZTbEJVVkVaMlpEQXhWVmRzY0d4aE0wSlJWMVprZW1ReVZrZFZibEpxVWxad1QxWnNVa2RTYkZaWFZXeGtWVTFWY0VoV2JHaDNWbFprU1ZGclpHRldNMDE0Vm14YVQxZFdjRVpQVjJob1pXdEpNRlpyVWtkVk1VcDBWbTVLVDFkRlNtOVVWRUV4VXpGV1ZWTnRkRTlTYkVwWVZsZDBkMVF4V2xWaVJscFdWbXhLVEZaVldrdFNNVXB4Vm14V1YySkZjRlJXUjNoV1pVWktWMVpzYkdoU1ZHeHpXVlJLZW1ReFdraE5XR1JWWVhwQ00xUnNhRWRXVmxwR1RsWkdWMkV4Y0VkVVZWcFNaREZTY1ZSdFJrNVNSVlY1VmpKd1QyRXhVblJTYmxKcVRUSlNWbGx0TlVOV01YQllZek5vVTFacmNGWlZWM2hEVmpGSmQwMUlaRmRTYlZJelZWZHpNVkpyTVZWWGJVWk9UVzVvVVZkV1pEUmpiVlp6VlZob1ZtSklRazlWYkZKelVsWnNWVlJyT1ZSaVJWWTFWMWh3UjFaV1dYcFJhMDVoVmpOTmVGVnNXbXRXVmtwelVXeGtVMVpGUmpOV2ExcGhWVEpLY2s1VldrNVhSVnBWVmpCb1ExUXhWbkpXV0doUFVteEtXbGt3Vm5kVU1WcFZWbXRhVjFKdGFETldWVnBMVTBac05sRnNWbE5XVkZaRVYyeGFWbVZGTlhOU2JGWlVZWHBzYjFsVVJsZE5NVnBGVW14T1ZtRjZWa2RVYkdoSFZURmtTR1ZHUmxaaE1sSnhWRlphVTFkWFRrWk9WM1JPVWtWYU5GWnNXbE5STVZKelYydG9ZVkpHU2xaV2FrNURVakZTV0dSRVFsZFNNVVkxVjJ0V05GVXhTWHBVYWxwWFVqTm9WRlpIYzNoU2F6RldWbXhLV0ZORlNsSldWM1JYVm1zeFIxVnVTbFppU0VKUFZGVlNSMlZHYkZsalJUbFZUVlp3U1ZaR1VrZFdWMFY0VTJ4a1ZWWkZSWGhVYlhoSFYxZEtSazlYZUdoTmJtY3lWbFJHVjFVeFZuSk5XRXBQVm14YVdWWnJWa3RWUm5CWVRWaHdUbEpzU2xsWk1GVXhWREZLVlZaVVNsZFNiV2g2VmxWYVlWSnNXbGxqUmxab1RWVndNVmRzV2xaTlZscFhZa1JhVm1GNlZsaFZiR1F3VG14YVIxWnNUbFppVlRWSVdWVmFWMVJzU2tobFJYUmFWbnBCTVZaRVJrWmxWMHBHVTIxR1RsSXphRVpXVjNSdllUSlNWMXBJVGxWaGEwcFJWV3hqTlU1V1duSmhSbHBxWVROUk1sbHJhRU5aVjBWM1RsaEtXbGRJUW5KWmJHUlRaRlprZEZKc1dsZGxiWGhNVjFaU1MxVXdNWE5pU0VaVVlrVndhRlJXYUVOTlJuQldXa2M1V2xZeFdsZFdiVFZEVmtVeFZsWnFUbFpsYTFvelZqQmtWMU5YVGtoU2JHUlRaVzE0VVZaV1VrdGpNVVp6WWpOa2FWSldTbFJWTUdSVFRWWlplV042VWs1V1ZGVXlWMVJPYzFadFZuUmhSWGhWVmpOb1dGcEVTbE5qYkZKMFpFZHNVMWRHUmpWWGExSktUVlpzVjFaWWNHaFNXR2hUVkZWb1ExZHNaRlZUV0dSUFZqRktXRmt3VWxkVmJVcFZVbTVDVm1GclNtaGFSbHBQVmpGU2NtTkhjRkpOYXpVelZYcEdSazlXUWxSWk0wSk1WVlF3T1VwNWEzQW5LU2s9Jykp'))'))
